gcc编译cpp：
 gcc test1.cpp -lstdc++ -o test  需要链接c++的库
正常gcc编译c文件，g++编译cpp文件

shell输入参数用$0表示程序名，$1表示第一个参数，大于9后
第10个参数用${10}
name'basename $0' 可以只返回程序名

${!#}表示最后一个参数

$*将命令行中提供的所有参数作为一个单词处理
$@将命令行中提供的所有参数作为一个字符串的多个单词处理
   允许迭代

wc命令 wc < test 统计数据中的文本
1 文本的行数 2 文本的单词数 3 文本的字节数

$?保存最后一条命令的执行状态，正常返回0

重定向错误:STDERR文件描述符的值设置为2,否则错误信息只会输出
到屏幕，不会重定向到文件
ls -al badfile 2> file1
同时重定向错误和数据到不同的文件
ls -al test test2 test3 2> test6 1> test7
所有输出发送到同一文件
ls -al test test2 test3 &> test7

空文件 /dev/null
cat /dev/null > testfile 快速将数据从文件中移除

tee命令将STDIN的数据同时发送到两个目的地
date | tee testfile  输出在屏幕的同时，输出到文件
who | tee -a testfile 向已有文件添加数据

信号 ctrl+c 生成SIGINT信号中断进程
ctrl+z 生成SIGTSTP信号暂停进程
ps au查看停止的作业 停止作业的状态STAT项显示为T

Linux信号
信号    值         描述
 1     SIGHUP     挂起进程
 2     SIGINT     中断进程
 3     SIGQUIT    停止进程
 9     SIGKILL    无条件终止进程
 15    SIGTERM    如果可能的话终止进程
 17    SIGSTOP    无条件停止，但不终止进程
 18    SIGTSTP    停止或暂停进程，但不终止它
 19    SIGCONT    重新启动停止的进程

bg 作业编号 以后台模式重新启动作业
fg 作业编号 以前台模式重新启动作业

nice命令在启动命令时设置调度优先级，要让命令在
更低的优先级运行，用-n选项
nice -n 10 ./test > test4out &
注意不能用-10 来增加优先级

renice命令更改已经运行的命令优先级
renice 10 -p PID
renice也是只能调制更低优先级，使用根用户可以调至更高
默认的优先级为0，即默认启动

sed命令
echo "This is a test" | sed 's/test/big test/'
sed 's/dog/cat/' test
sed -e 's/brown/green/; s/dog/cat/' test
sed从文件中读取命令
sed -f script1 test
script1存储：
s/brown/green/
s/dog/cat/

sed 's/test/trial/2' data4 指定2作为替换标记，仅替换
每一行中第二次出现的模式
sed 's/test/trial/g' data4 g替换文本中模式的每一个实例
sed -n 's/test/trial/p' data4 p打印包含替换命令中匹配模式的那一行,-n选项禁止sed编辑器输出
sed 's/test/trial/w test' data5 w将输出保存到test文件
sed 's!/bin/bash!/bin/csh!' /etc/passwd 感叹号用作字符串定界符

使用地址
sed '2s/dog/cat/' data 仅替换第2行
sed '2,3s/dog/cat/' data 替换第2行和第3行
sed '2,$s/dog/cat/' data 从第二行开始直到文本结束
sed '2d' data 将data中内容删除第2行，然后输出
sed '2,3d' data
sed '2,$d' data
sed '/number 1/d' data 模式匹配，删除带有number 1的行
sed '/1/,/3/d' data 指定开始模式，和结束模式，将之间删除，若没发现结束模式，则全删
sed '1,2w test' data 将data的前2行写入test文件
sed '3r data11' data6 将data11中的数据插入data6第3行
    后输出
sed '/number 2/r data11' data6 将data11数据插入data6
    中number 2匹配行后面显示
sed '$r data11' data6 将data11数据插入data6末尾

gawk命令,$0表示整行文本，$1表示文本行中第一个数据字段
默认字段分隔符为空白符
gawk '{print "hello"}'
gawk '{print $1}' data
gawk -F: '{print $1}' /etc/passwd -F指定文件中数据分隔
符为:
echo "My name is Rich" | gawk '{$4="Dave"; print $0}'
引用文件中的命令
gawk -F: -f script /etc/passwd
script中内容为{print $5 "'s userid is" $1}

gawk 'BEGIN {print "Hello World"}' 先执行BEGIN，然后退出
gawk 'BEGIN {print "Hello world"} {print $0}'
gawk 'BEGIN {print "Hello world"} {print $0} END {
print "bye"}'

正则表达式特殊字符：.*[]^${}\+?|(),加\
sed -n '/\$/p' data
注：/ 也需要转义

脱字符：^从文本头开始匹配
echo "Books are great" | sed -n '/^Book/p'
查找结尾：book$
删除空行: sed '/^$/d' data
字符类 []中可为数字
sed -n '/[ch]at/p' data 匹配cat或者hat
只匹配2个数字：
/^[0123456789][0123456789]$/ -> 简化 [0-9][0-9]

否定字符类
sed -n '/[^ch]at/p' data 不匹配cat和hat

指定非连续范围
sed -n '/[a-ch-m]/p' data

特殊字符类
[[:alpha:]] 匹配任意字母字符，大写或小写
[[:alnum:]] 匹配任意字母数字字符，0~9,A~Z,a~z
[[:blank:]] 匹配空格或者制表符字符
[[:digit:]] 匹配0~9之间的数字
[[:lower:]] 匹配任意小写字母 a~z
[[:print:]] 匹配任意可打印字符
[[:punct:]] 匹配标点符号
[[:space:]] 匹配任意空白字符
[[:upper:]] 匹配任意大写字母

在某个字符之后加星号，表示该字符必须在匹配模式的文本
中不出现或出现多次
echo "ik" | sed -n '/ie*k/p

/regular.*expression/' 匹配regular和expression不相邻
出现的情形

/b[ae]*t/ a和e字符任意组合出现在b和t之间（包括不出
现），定义的字符类以外的字符出现，匹配失败

问号表示其前面的字符可以不出现或出现一次
echo "beet" | gawk '/be?t/{print $0}'

问号与字符类连用，可以不出现，也可以只出现一个
但不能同时出现
echo "bt" | gawk '/b[ae]?t/{print $0}'

加号表示e至少要出现一次
echo "bet" | gawk '/be+t/{print $0}'

加号也可与字符类连用,a或e必须至少出现一个
echo "bt" | gawk '/b[ae]+t/{print $0}'

b与t之间e出现的次数
echo "bet" | gawk --re-interval '/be{1}t/{print $0}'
e可以出现一次或两次
echo "bet" | gawk --re-interval '/be{1,2}t/{print $0}'
echo "bet" | gawk --re-interval '/b[ae]{1,2}t/{print $0}'

管道符号
查找正则表达式cat或dog,正则表达式与管道之间不能有空格
否则将把空格加入模式中
echo "The cat is asleep" | gawk '/cat|dog/{print $0}'

管道符号两边的任何正则表达式都可以使用任意正则表达式模式
（包括字符类）
echo "He has a hat" | gawk '/[ch]at|dog/{print $0}'

正则表达式模式使用圆括号分组
echo "Sat" | gawk '/Sat(urday)?/{print $0}'

分组与管道符号结合
echo "cat" | gawk '/(c|b)a(b|t)/{print $0}'

保留空间
模式空间是一个活动的缓冲区，另一空间：保留空间
h:将模式空间复制到保留空间
H:将模式空间追加到保留空间
g:将保留空间的内容（第一行数据）复制到模式空间
   替换当前文本
G:将保留空间追加到模式空间
x:将模式空间和保留空间的内容交换

sed中n命令，检索下一行，放到模式空间
p命令会打印模式空间的内容
否定命令：检索出来的header行不打印，其余行打印
sed -n '/header/!p' data

分支命令 b后面没跟标签，则只有第2，3行不执行替换
sed '{
2,3b
s/This is/Is this/
s/line./test?/
}' data

sed '{  
/first/b jump1
s/ is/ might be/
s/line/test/
:jump1
s/data/text/
}' data2
